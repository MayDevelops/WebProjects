{"ast":null,"code":"import { buttonStore } from \"./store\"; // export const getComic = (sentType) => async (dispatch, getState) => {\n//     console.log(sentType);\n//     const url = getState().url;\n//     // console.log(url);\n//     const response = await fetch(url)\n//         .then(res => res.json());\n//     // console.log(response);\n//\n//     // console.log('Calling dispatch: ' + buttonStore.getState().url);\n//     console.log(response.img);\n//     let num = parseInt(response.num);\n//     let randomNum = (Math.ceil(Math.random() * 100));\n//\n//     if(sentType === \"FIRST\") {\n//         buttonStore.dispatch({\n//             type: \"FIRST\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=1',\n//                 month: response.month,\n//                 num: num,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//\n//     } else if(sentType === \"PREVIOUS\") {\n//         buttonStore.dispatch({\n//             type: \"PREVIOUS\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n//                 month: response.month,\n//                 num: num - 1,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else if (sentType === \"NEXT\") {\n//         buttonStore.dispatch({\n//             type: \"NEXT\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n//                 month: response.month,\n//                 num: num + 1,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else if (sentType === \"RANDOM\") {\n//         buttonStore.dispatch({\n//             type: \"RANDOM\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (randomNum),\n//                 month: response.month,\n//                 num: randomNum,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else {\n//         buttonStore.dispatch({\n//             type: \"LAST\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=latest',\n//                 month: response.month,\n//                 num: num,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     }\n\nexport const getFirstComic = sentType => async (dispatch, getState) => {\n  const url = 'https://xkcd.now.sh/?comic=1';\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      url: response.link,\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getPreviousComic = sentType => async (dispatch, getState) => {\n  const url = getState().url;\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: \"PREVIOUS\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n      month: response.month,\n      num: num - 1,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getNextComic = sentType => async (dispatch, getState) => {\n  const url = getState().url;\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: \"NEXT\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n      month: response.month,\n      num: num + 1,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getRandomComic = sentType => async (dispatch, getState) => {\n  const url = getState().url;\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  let randomNum = Math.ceil(Math.random() * 100);\n  buttonStore.dispatch({\n    type: \"RANDOM\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=' + randomNum,\n      month: response.month,\n      num: randomNum,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getLastComic = sentType => async (dispatch, getState) => {\n  const url = getState().url;\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: \"LAST\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=latest',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\n/**\n * The url link is always one ahead because we are decrementinig the num prop in the wrong spot.\n * The RESPONSE needs to be REQUESTED with the already decremented num prop.\n */\n// console.log(buttonStore.getState());\n// buttonStore.subscribe(() => {\n//     console.log(\"Store Changed!\", buttonStore.getState());\n// });","map":{"version":3,"sources":["/Users/jmay1126/WebProjects/ReactWebServer/Homepage/src/Data/asyncActions.js"],"names":["buttonStore","getFirstComic","sentType","dispatch","getState","url","response","fetch","then","res","json","num","parseInt","type","payload","link","month","year","news","safe_title","transcript","alt","img","title","day","getPreviousComic","getNextComic","getRandomComic","randomNum","Math","ceil","random","getLastComic"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,SAA1B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,aAAa,GAAIC,QAAD,IAAc,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACrE,QAAMC,GAAG,GAAG,8BAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAL,CAClBG,IADkB,CACbC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADM,CAAvB;AAGA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,QAAQ,CAACK,GAAV,CAAlB;AAEAX,EAAAA,WAAW,CAACG,QAAZ,CAAqB;AACjBU,IAAAA,IAAI,EAAEX,QADW;AAEjBY,IAAAA,OAAO,EAAE;AACLT,MAAAA,GAAG,EAAEC,QAAQ,CAACS,IADT;AAELC,MAAAA,KAAK,EAAEV,QAAQ,CAACU,KAFX;AAGLL,MAAAA,GAAG,EAAEA,GAHA;AAILM,MAAAA,IAAI,EAAEX,QAAQ,CAACW,IAJV;AAKLC,MAAAA,IAAI,EAAEZ,QAAQ,CAACY,IALV;AAMLC,MAAAA,UAAU,EAAEb,QAAQ,CAACa,UANhB;AAOLC,MAAAA,UAAU,EAAEd,QAAQ,CAACc,UAPhB;AAQLC,MAAAA,GAAG,EAAEf,QAAQ,CAACe,GART;AASLC,MAAAA,GAAG,EAAEhB,Q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","sourcesContent":["import {buttonStore} from \"./store\";\n\n\n// export const getComic = (sentType) => async (dispatch, getState) => {\n//     console.log(sentType);\n//     const url = getState().url;\n//     // console.log(url);\n//     const response = await fetch(url)\n//         .then(res => res.json());\n//     // console.log(response);\n//\n//     // console.log('Calling dispatch: ' + buttonStore.getState().url);\n//     console.log(response.img);\n//     let num = parseInt(response.num);\n//     let randomNum = (Math.ceil(Math.random() * 100));\n//\n//     if(sentType === \"FIRST\") {\n//         buttonStore.dispatch({\n//             type: \"FIRST\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=1',\n//                 month: response.month,\n//                 num: num,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//\n//     } else if(sentType === \"PREVIOUS\") {\n//         buttonStore.dispatch({\n//             type: \"PREVIOUS\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n//                 month: response.month,\n//                 num: num - 1,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else if (sentType === \"NEXT\") {\n//         buttonStore.dispatch({\n//             type: \"NEXT\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n//                 month: response.month,\n//                 num: num + 1,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else if (sentType === \"RANDOM\") {\n//         buttonStore.dispatch({\n//             type: \"RANDOM\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=' + (randomNum),\n//                 month: response.month,\n//                 num: randomNum,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     } else {\n//         buttonStore.dispatch({\n//             type: \"LAST\",\n//             payload: {\n//                 url: 'https://xkcd.now.sh/?comic=latest',\n//                 month: response.month,\n//                 num: num,\n//                 year: response.year,\n//                 news: response.news,\n//                 safe_title: response.safe_title,\n//                 transcript: response.transcript,\n//                 alt: response.alt,\n//                 img: response.img,\n//                 title: response.title,\n//                 day: response.day\n//             }\n//         })\n//     }\n\n\nexport const getFirstComic = (sentType) => async (dispatch, getState) => {\n    const url = 'https://xkcd.now.sh/?comic=1';\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            url: response.link,\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getPreviousComic = (sentType) => async (dispatch, getState) => {\n    const url = getState().url;\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: \"PREVIOUS\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n            month: response.month,\n            num: num - 1,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getNextComic = (sentType) => async (dispatch, getState) => {\n    const url = getState().url;\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: \"NEXT\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n            month: response.month,\n            num: num + 1,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getRandomComic = (sentType) => async (dispatch, getState) => {\n    const url = getState().url;\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n    let randomNum = (Math.ceil(Math.random() * 100));\n\n    buttonStore.dispatch({\n        type: \"RANDOM\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=' + (randomNum),\n            month: response.month,\n            num: randomNum,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getLastComic = (sentType) => async (dispatch, getState) => {\n    const url = getState().url;\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: \"LAST\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=latest',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\n\n\n/**\n * The url link is always one ahead because we are decrementinig the num prop in the wrong spot.\n * The RESPONSE needs to be REQUESTED with the already decremented num prop.\n */\n\n// console.log(buttonStore.getState());\n\n// buttonStore.subscribe(() => {\n//     console.log(\"Store Changed!\", buttonStore.getState());\n// });\n"]},"metadata":{},"sourceType":"module"}