{"ast":null,"code":"import { buttonStore } from \"./store\";\nexport const getComic = sentType => async (dispatch, getState) => {\n  console.log(sentType);\n  const url = getState().url; // console.log(url);\n\n  const response = await fetch(url).then(res => res.json()); // console.log(response);\n  // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n  console.log(response.img);\n  let num = parseInt(response.num);\n  let randomNum = Math.ceil(Math.random() * 100);\n\n  if (sentType === \"FIRST\") {\n    buttonStore.dispatch({\n      type: \"FIRST\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=1',\n        month: response.month,\n        num: num,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  } else if (sentType === \"PREVIOUS\") {\n    buttonStore.dispatch({\n      type: \"PREVIOUS\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n        month: response.month,\n        num: num - 1,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  } else if (sentType === \"NEXT\") {\n    buttonStore.dispatch({\n      type: \"NEXT\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n        month: response.month,\n        num: num + 1,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  } else if (sentType === \"RANDOM\") {\n    buttonStore.dispatch({\n      type: \"RANDOM\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + randomNum,\n        month: response.month,\n        num: randomNum,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  } else {\n    buttonStore.dispatch({\n      type: \"LAST\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=latest',\n        month: response.month,\n        num: num,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  }\n\n  const getFirst = sentType => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url; // console.log(url);\n\n    const response = await fetch(url).then(res => res.json()); // console.log(response);\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = Math.ceil(Math.random() * 100);\n    buttonStore.dispatch({\n      type: \"FIRST\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=1',\n        month: response.month,\n        num: num,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  };\n\n  const getPrevious = sentType => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url; // console.log(url);\n\n    const response = await fetch(url).then(res => res.json()); // console.log(response);\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = Math.ceil(Math.random() * 100);\n    buttonStore.dispatch({\n      type: \"PREVIOUS\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n        month: response.month,\n        num: num - 1,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  };\n\n  const getNext = sentType => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url; // console.log(url);\n\n    const response = await fetch(url).then(res => res.json()); // console.log(response);\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = Math.ceil(Math.random() * 100);\n    buttonStore.dispatch({\n      type: \"NEXT\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n        month: response.month,\n        num: num + 1,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  };\n\n  const getRandom = sentType => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url; // console.log(url);\n\n    const response = await fetch(url).then(res => res.json()); // console.log(response);\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = Math.ceil(Math.random() * 100);\n    buttonStore.dispatch({\n      type: \"RANDOM\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=' + randomNum,\n        month: response.month,\n        num: randomNum,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  };\n\n  const getLast = sentType => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url; // console.log(url);\n\n    const response = await fetch(url).then(res => res.json()); // console.log(response);\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = Math.ceil(Math.random() * 100);\n    buttonStore.dispatch({\n      type: \"LAST\",\n      payload: {\n        url: 'https://xkcd.now.sh/?comic=latest',\n        month: response.month,\n        num: num,\n        year: response.year,\n        news: response.news,\n        safe_title: response.safe_title,\n        transcript: response.transcript,\n        alt: response.alt,\n        img: response.img,\n        title: response.title,\n        day: response.day\n      }\n    });\n  };\n  /**\n   * The url link is always one ahead because we are decrementinig the num prop in the wrong spot.\n   * The RESPONSE needs to be REQUESTED with the already decremented num prop.\n   */\n  // console.log(buttonStore.getState());\n  // buttonStore.subscribe(() => {\n  //     console.log(\"Store Changed!\", buttonStore.getState());\n  // });\n\n};","map":{"version":3,"sources":["/Users/jmay1126/WebProjects/ReactWebServer/Homepage/src/Data/asyncActions.js"],"names":["buttonStore","getComic","sentType","dispatch","getState","console","log","url","response","fetch","then","res","json","img","num","parseInt","randomNum","Math","ceil","random","type","payload","month","year","news","safe_title","transcript","alt","title","day","getFirst","getPrevious","getNext","getRandom","getLast"],"mappings":"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","sourcesContent":["import {buttonStore} from \"./store\";\n\n\nexport const getComic = (sentType) => async (dispatch, getState) => {\n    console.log(sentType);\n    const url = getState().url;\n    // console.log(url);\n    const response = await fetch(url)\n        .then(res => res.json());\n    // console.log(response);\n\n    // console.log('Calling dispatch: ' + buttonStore.getState().url);\n    console.log(response.img);\n    let num = parseInt(response.num);\n    let randomNum = (Math.ceil(Math.random() * 100));\n\n    if (sentType === \"FIRST\") {\n        buttonStore.dispatch({\n            type: \"FIRST\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=1',\n                month: response.month,\n                num: num,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n\n    } else if (sentType === \"PREVIOUS\") {\n        buttonStore.dispatch({\n            type: \"PREVIOUS\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n                month: response.month,\n                num: num - 1,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    } else if (sentType === \"NEXT\") {\n        buttonStore.dispatch({\n            type: \"NEXT\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n                month: response.month,\n                num: num + 1,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    } else if (sentType === \"RANDOM\") {\n        buttonStore.dispatch({\n            type: \"RANDOM\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (randomNum),\n                month: response.month,\n                num: randomNum,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    } else {\n        buttonStore.dispatch({\n            type: \"LAST\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=latest',\n                month: response.month,\n                num: num,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n\n    const getFirst = (sentType) => async (dispatch, getState) => {\n        console.log(sentType);\n        const url = getState().url;\n        // console.log(url);\n        const response = await fetch(url)\n            .then(res => res.json());\n        // console.log(response);\n\n        // console.log('Calling dispatch: ' + buttonStore.getState().url);\n        console.log(response.img);\n        let num = parseInt(response.num);\n        let randomNum = (Math.ceil(Math.random() * 100));\n\n        buttonStore.dispatch({\n            type: \"FIRST\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=1',\n                month: response.month,\n                num: num,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n    const getPrevious = (sentType) => async (dispatch, getState) => {\n        console.log(sentType);\n        const url = getState().url;\n        // console.log(url);\n        const response = await fetch(url)\n            .then(res => res.json());\n        // console.log(response);\n\n        // console.log('Calling dispatch: ' + buttonStore.getState().url);\n        console.log(response.img);\n        let num = parseInt(response.num);\n        let randomNum = (Math.ceil(Math.random() * 100));\n\n        buttonStore.dispatch({\n            type: \"PREVIOUS\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (num - 1),\n                month: response.month,\n                num: num - 1,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n    const getNext = (sentType) => async (dispatch, getState) => {\n        console.log(sentType);\n        const url = getState().url;\n        // console.log(url);\n        const response = await fetch(url)\n            .then(res => res.json());\n        // console.log(response);\n\n        // console.log('Calling dispatch: ' + buttonStore.getState().url);\n        console.log(response.img);\n        let num = parseInt(response.num);\n        let randomNum = (Math.ceil(Math.random() * 100));\n\n        buttonStore.dispatch({\n            type: \"NEXT\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (num + 1),\n                month: response.month,\n                num: num + 1,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n    const getRandom = (sentType) => async (dispatch, getState) => {\n        console.log(sentType);\n        const url = getState().url;\n        // console.log(url);\n        const response = await fetch(url)\n            .then(res => res.json());\n        // console.log(response);\n\n        // console.log('Calling dispatch: ' + buttonStore.getState().url);\n        console.log(response.img);\n        let num = parseInt(response.num);\n        let randomNum = (Math.ceil(Math.random() * 100));\n\n        buttonStore.dispatch({\n            type: \"RANDOM\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=' + (randomNum),\n                month: response.month,\n                num: randomNum,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n    const getLast = (sentType) => async (dispatch, getState) => {\n        console.log(sentType);\n        const url = getState().url;\n        // console.log(url);\n        const response = await fetch(url)\n            .then(res => res.json());\n        // console.log(response);\n\n        // console.log('Calling dispatch: ' + buttonStore.getState().url);\n        console.log(response.img);\n        let num = parseInt(response.num);\n        let randomNum = (Math.ceil(Math.random() * 100));\n\n        buttonStore.dispatch({\n            type: \"LAST\",\n            payload: {\n                url: 'https://xkcd.now.sh/?comic=latest',\n                month: response.month,\n                num: num,\n                year: response.year,\n                news: response.news,\n                safe_title: response.safe_title,\n                transcript: response.transcript,\n                alt: response.alt,\n                img: response.img,\n                title: response.title,\n                day: response.day\n            }\n        })\n    }\n\n\n    /**\n     * The url link is always one ahead because we are decrementinig the num prop in the wrong spot.\n     * The RESPONSE needs to be REQUESTED with the already decremented num prop.\n     */\n\n    // console.log(buttonStore.getState());\n\n    // buttonStore.subscribe(() => {\n    //     console.log(\"Store Changed!\", buttonStore.getState());\n    // });\n}\n"]},"metadata":{},"sourceType":"module"}