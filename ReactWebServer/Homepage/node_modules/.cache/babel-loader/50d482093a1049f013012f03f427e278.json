{"ast":null,"code":"import { buttonStore } from \"./store\";\nimport moment from \"moment\";\nexport const getFirstComic = sentType => async (dispatch, getState) => {\n  const url = 'https://xkcd.now.sh/?comic=1';\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getPreviousComic = sentType => async (dispatch, getState) => {\n  let bs = buttonStore.getState();\n  const urlInt = parseInt(bs.num);\n  const url = 'https://xkcd.now.sh/?comic=' + (urlInt - 1);\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: \"PREVIOUS\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getNextComic = sentType => async (dispatch, getState) => {\n  let bs = buttonStore.getState();\n  const urlInt = parseInt(bs.num);\n  const url = 'https://xkcd.now.sh/?comic=' + (urlInt + 1);\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: \"NEXT\",\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getRandomComic = sentType => async (dispatch, getState) => {\n  let randomNum = Math.ceil(Math.random() * 100);\n  const url = 'https://xkcd.now.sh/?comic=' + randomNum;\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const getLastComic = sentType => async (dispatch, getState) => {\n  const url = 'https://xkcd.now.sh/?comic=latest';\n  const response = await fetch(url).then(res => res.json());\n  let num = parseInt(response.num);\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      url: 'https://xkcd.now.sh/?comic=',\n      month: response.month,\n      num: num,\n      year: response.year,\n      news: response.news,\n      safe_title: response.safe_title,\n      transcript: response.transcript,\n      alt: response.alt,\n      img: response.img,\n      title: response.title,\n      day: response.day\n    }\n  });\n};\nexport const addComment = (sentType, setUserName, setUserComment) => async (dispatch, getState) => {\n  let bs = buttonStore.getState();\n  const urlInt = parseInt(bs.num);\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      newComment: {\n        comicNum: urlInt,\n        userName: setUserName,\n        userComment: setUserComment,\n        time: moment().format('LLL')\n      }\n    }\n  });\n};\nexport const addStars = (sentType, setRating, needsParsing) => async (dispatch, getState) => {\n  let bs = buttonStore.getState();\n  let stars;\n  const comicNumber = parseInt(bs.num);\n\n  if (needsParsing) {\n    stars = parseInt(setRating);\n  } else {\n    stars = setRating;\n  }\n\n  buttonStore.dispatch({\n    type: sentType,\n    payload: {\n      newRating: {\n        comicNum: comicNumber,\n        ratings: {\n          stars: stars\n        }\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/fms/Web Projects/ReactWebServer/Homepage/src/Data/asyncActions.js"],"names":["buttonStore","moment","getFirstComic","sentType","dispatch","getState","url","response","fetch","then","res","json","num","parseInt","type","payload","month","year","news","safe_title","transcript","alt","img","title","day","getPreviousComic","bs","urlInt","getNextComic","getRandomComic","randomNum","Math","ceil","random","getLastComic","addComment","setUserName","setUserComment","newComment","comicNum","userName","userComment","time","format","addStars","setRating","needsParsing","stars","comicNumber","newRating","ratings"],"mappings":"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","sourcesContent":["import {buttonStore} from \"./store\";\nimport moment from \"moment\";\n\nexport const getFirstComic = (sentType) => async (dispatch, getState) => {\n    const url = 'https://xkcd.now.sh/?comic=1';\n    const response = await fetch(url)\n        .then(res => res.json());\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\n\nexport const getPreviousComic = (sentType) => async (dispatch, getState) => {\n    let bs = buttonStore.getState();\n    const urlInt = parseInt(bs.num);\n    const url = 'https://xkcd.now.sh/?comic=' + (urlInt - 1);\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: \"PREVIOUS\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getNextComic = (sentType) => async (dispatch, getState) => {\n    let bs = buttonStore.getState();\n    const urlInt = parseInt(bs.num);\n    const url = 'https://xkcd.now.sh/?comic=' + (urlInt + 1);\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: \"NEXT\",\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\nexport const getRandomComic = (sentType) => async (dispatch, getState) => {\n    let randomNum = (Math.ceil(Math.random() * 100));\n    const url = 'https://xkcd.now.sh/?comic=' + (randomNum);\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\n\nexport const getLastComic = (sentType) => async (dispatch, getState) => {\n    const url = 'https://xkcd.now.sh/?comic=latest';\n    const response = await fetch(url)\n        .then(res => res.json());\n\n    let num = parseInt(response.num);\n\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            url: 'https://xkcd.now.sh/?comic=',\n            month: response.month,\n            num: num,\n            year: response.year,\n            news: response.news,\n            safe_title: response.safe_title,\n            transcript: response.transcript,\n            alt: response.alt,\n            img: response.img,\n            title: response.title,\n            day: response.day\n        }\n    })\n}\n\nexport const addComment = (sentType, setUserName, setUserComment) => async (dispatch, getState) => {\n    let bs = buttonStore.getState();\n    const urlInt = parseInt(bs.num);\n\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            newComment: {\n                comicNum: urlInt,\n                userName: setUserName,\n                userComment: setUserComment,\n                time: moment().format('LLL')\n            }\n        }\n    })\n}\n\nexport const addStars = (sentType, setRating, needsParsing) => async (dispatch, getState) => {\n    let bs = buttonStore.getState();\n    let stars;\n    const comicNumber = parseInt(bs.num);\n    if (needsParsing) {\n        stars = parseInt(setRating);\n    } else {\n        stars = setRating;\n    }\n    buttonStore.dispatch({\n        type: sentType,\n        payload: {\n            newRating: {\n                comicNum: comicNumber,\n                ratings: {\n                    stars: stars\n                }\n            }\n        }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}